		#Bash Shell Scripting
_______________________________________________________________________
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
#Bash Aliases

A bash Alias is a shortcut to a command.Every Linux distribution has at least a few aliases available.
alias - To list all aliases.
alias command - Example: alias ll='ls -alF' - runs in fast (ls -alF).So we have set ll command as shortcut to this ls command.
\command - to run the original command and not the alias.(e.g. \ls)
unalias command - to remove the alias for the current session.e.g. unalias now

!!! If you close the terminal session, the alias won't be saved.To make aliases permanent , declare them in the ~/.bash_profile or ~/.bashrc files in the user's home directory.
.bashrc is read when the shell starts. Example: This command displays the current time.alias now="date +%F\ %T".After writing this in terminal, we have to close or open another terminal , to get the .bashrc change in that.

We can use alias for ssh connection quickly - example: alias server1="ssh -p 2234 user1@12.123.12.13"

- - - - - - - - - -
#SHELL SCRIPTING

A shell is a program that takes commands from the user through the keyboard , and gives them to the operating system's kernel to get executed.It's also called the command interpreter because it accepts commands from the user and then checks or interprets them to see if they are syntactically correct.And if they are , the shell will send them to the kernel for execution.The Shell gets started, when the user logs in or starts the terminal.
echo $0\$SHELL - to see what shell has started.
cat /etc/passwd - to see the default shell in the last column of each user.

- - -
#Benefits of using Shell Scripts
A shell script is basically an executable text file, that contains Shell commands and other specific structures and components like variable, functions, loops and so on that are executed sequentially.Whenever you find yourself doing the same task over and over again, you should use shell scripting.This is known as repetitive task automation.
Using shell scripting , you can create your own power tools, customize administrative tasks, or create simple applications.
And since the scripts you develop are well tested, the chances of errors are highly reduced. 
Another advantage of using Shell scripts is that the one that runs them doesn't have to know all the details of Linux and programming.

Some practical examples of common tasks, where Shell scripts used are:
Monitoring the system
Data backup and restoring
Creating an email-based alert system, when something happens
User administration
Security
Auditing and many more..

- - Create a shell script
mkdir ~/Desktop/scripts
nano first_script.sh (it's common 'not necessary' for Shell scripts to have the 'sh' extension)

~/Desktop/first_script.sh file's content:
mkdir -p dir1
echo "some text" > dir1/file.txt
ls -l dir1
cat dir1/file.txt

- - Execute the script 
Normally a shell script is an executable file, so we need to add the execution permission for the owner. -> chmod 700 first_script.sh
./first_script.sh (just type the absolute or relative path of the script , and it will be executed).If you use filename without absolute or relative path it will cause an error  'command not found'.So the shell is not looking for the script in the current directory.It's looking for commands and scripts only in the directories from the $PATH variable.

echo $PATH - shows the directories where the shell is looking for executables.So add the directory that contains the script to the path or execute the script using absolute or relative path.
- - - - - -
#The Shebang and comments

For executable scripts, the system expects in the first line a so-called shebang that indicates which program to run as interpreter with the script file as argument (or in simple words , what program will run the file 'bash/python/php or other').
If we execute a script without such a shebang directory , like we did in the example above, it will use the default shell of the current user.The shebang consists of a sequence of two characters: #! and then the shell file (#!/usr/bin/bash).So start the script with shebang at the first line.
So if we write e.g. a python code in script file without shebang, and execute it , it will cause a syntax error.But if we add at the first line the python3 path shebang (by knowing 'which python3'), it will execute the script.

Bash ignores everything on the line, after the # symbol.So # is used for commenting.The only exception to this rule is when the first line of the script starts with #! which is the shebang.
We can not only comment in blank line, but also after any code in any line (e.g. cat dir1/test.txt #This code is for reading the test.txt file's content).
Bash doesn't support multiline comments.So the simplest way to write multiline comments in Bash is to add single comments one after another. 
- - - - - -
#Running Scripts

1. The most common way to run bash scripts, is to add the execution permission to the script file and run it using absolute or relative path followed by the script name, if the script is in the current directory.(examples: ./script.sh or /home/user/script.sh)

2. Another way to run a script is to write the name of the program or interpreter that will run the script and the script name like "bash script.sh" or "python3 script.sh".In this case , it is not mandatory for file to have execution permission set.This way running the script will automatically overwrite the shebang directive.

3. Last way to run a script is with 'source' command , like "source script.sh".The file does not require the execution permission and the source command reads and executes commands from the file , specified as its argument in the current shell environment.So it is for current shell and the shebang directive won't work even if it is written at the top.The difference between the first method and this one, is that using first method './', the script will be executed in a new shell (subshell).And when using the source command, the script is running in the current shell , that's running in the terminal.Note that source and the name of the script is the same as ". script.sh".So instead of 'source script.sh' we can type '. script.sh' with dot and whitespace.
- - - - - -
#Variables in Bash

Variable is a name for a memory location where a value, which can be manipulated is stored.You can create the variable in a script file or directly in the shell that's running in the terminal.
os=Linux - the name of the variable is os and it's value is "Linux".Its not applied to use whitespace before and after the equal sign.
os="Linux is OS" - use double quotes"" if the value needs to have whitespace.
Bash is weakly typed programming language that does not require you to define any data type at the time of variable declaration.So when any numeric value is assigned to a variable, then it will work as an integer.And when any text value is assigned to a variable, then it is a string.
In bash there are no any floating point numbers , only integers.  age=30
The variable names should be descriptive and remind you of the value they hold.A variable name cannot start with a number nor can it contain spaces or other special characters like .,;!? and so on.
You can use Capital letters and underscore for variable names.

echo $age | echo $os | echo $user_name  - To access the value of a variable , precede the name of the variable with a dollar sign.
echo "I'm learning $os operating system" - You can also reference the value of a variable inside the string by enclosing everything in double quotes.
(echo '$os') - This won't display the value of the variable.Instead it will display '$os' like a string, because we need to use double quotes with variables.
echo "The value of \$os is $os" - in this example, the backslash\ symbol is canceling the special meaning of the dollar sign and its printing "The value of $os is Linux".
$distro=Kali -> my_distro="I use $distro $os" -> echo $my_distro ->  I use Kali Linux.So we can use variable within the variable's value.

set - To get a list of all shell variables and functions run the "set" command.So we can use "grep" to find a specific variable or function.
unset variablename - To undefine or remove a variable use the unset command -> unset os (without the $ sign, because we are not referencing the value of the variable).

Shell variables that are introduced by the operating system, shell startup scripts, or by the shell itself, are usually all in capitals.Examples: $PATH, $USER, $HOME.

declare -r logdir="logdir is a constant" - Sometimes you want to make sure that the content of a variable does not change, it's read-only.To declare such a constant use the declare built-in command with the -r option.So we can use the variable as commonly.If you try to change the value of constant/readonly variable, you'll get an error.And you can't unset/remove read-only variable (e.g. unset logdir).

Example` Print number of lines, first 5 lines, and last 7 lines of /etc/passwd which should be as a variable's value.Let's type this task in a shell script file:
############################################
#!/usr/bin/bash
filename=/etc/passwd
echo "---------------------"
echo "Number of lines in $filename"
wc -l $filename
echo "---------------------"
echo "First 5 lines"
head -n 5 $filename
echo "---------------------"
echo "Last 7 lines"
tail -n 7 $filename
echo "---------------------"
############################################
- - - - - - 
#Environment Variables

Each time we launch a terminal window in the shell, inside it, a collection of predefined variables are set with some dynamic values and are used to customize the way the system works and behaves.There are two classes of such variables: environment variables and shell variables.

Environment Variables are defined for the current shell and are inherited by any child shells or processes.They are used to pass information to processes that are spawned from the current shell.

Shell Variables are contained exclusively within the shell in which they are defined or set.

$PATH is such an environment variable that holds a list of directories, separated by columns where the shell will search for the commands you run.example: echo $PATH -> home/mrhacker/.local/bin:/usr/local/sbin.When assigning multiple values to such a variable, it's common to separate them by a colon.Most of times , you don't use environment variables directly.They are referenced by individual applications and services as needed.For example, your home directory is set as an environment variable called $HOME when you log in.The system knows your home directory by reading the value of this variable.Other environment variables will store information about the default browser or text editor, the keyboard layout settings and many more.
env - to view all environment variables set on your system.
printenv - another useful command that lists the environment variables, but also the value of a specific variable.Running it without any argument will print out all environmental variables.And giving a variable as argument will print out the value of that variable (e.g. printenv HOME PATH USER optionally).
env and printenv will print out all environment variables.

set - To display all available variables,environment, shell and those created by the user.The set command is displaying shell functions as well.And the output of information is overwhelming.To cleanup the output, we specify that set should operate in posix mode , so it won't print the shell functions.
set -o posix -> set - to run set in posix mode.So it displays only the environment and shell variables.

Environment variables can be used when you want to change the default settings of your system.For example, you want to add a directory to the path, so that you can run the scripts in that directory by typing their name.So type in ~/.bashrc:
export PATH=$PATH:~/Desktop/scripts/
After typing this , save the file and load it in the current shell source (source ~/.bashrc).So now the PATH variable contains the scripts directory , and any script or command found in that directory can be run by name as any other command , without writing ./ before its name.

To create a new environment variable, you have to export it using the "export" command before the variable name.So in a startup configuration file like .bashrc , we can add e.g. (export MYVAR=342).This is a user specific environment variable , and if you want to create a system-wide variable(available for all users), declare the variable in /etc/profile or /etc/bash.bashrc .Of course , only root can edit those files.There is also a file /etc/environment, which specifies the system-wide environment variables to be set.The file must consist of simple name=value pairs on separate lines.

- - - - - -
#Getting User Input

read - to get user input."read" will make the program flow stop until the user has given an input and has indeed the input with the return or enter key.

read variablename - The execution stopped and its waiting for the user to enter a string and hit enter.A new variable called name was created and the value stored is the string (your input).
read -p "Your text before input" variablename -  This will display a text to hint something about the input , and will store the input value into new variablename variable.

Example:
read -p "What is the IP to block? " ip
iptables -I INPUT -s $ip -j DROP
Here we will drop all packets from a specific IP address that is given by the user (we will use iptables for now).
We can type this in script file , for prompting for IP address , to block it's incoming traffic, and run the script as root.

read -s -p "your password" my_password - If you want to enter a password echoing it in the terminal, which will not show the input you type.
- - - - - -
#Special Variables and Positional Arguments

Bash scripts require argument values to provide input to the script.The arguments are the values provided after the script name when running it.For example. if you are running apt install nginx (apt is the script or the command name, install is the first argument of the script, and nginx is the second argument of the script).The name of the script and the arguments are separated by the spaces which in this case is known as the default internal field separator.There are some predefined variables for this purpose, also known as positional arguments.

Example: ./script.sh filename1 dir1 10.0.0.1
$0 is the name of the script itself (script.sh).$0 is not a positional argument , but is useful when you want to run the script again while giving it another input values.
$1 is the first positional argument (filename1)
$2 is the second positional argument (dir1)
$3 is the last positional argument (10.0.0.1).The $9 will be 9th argument, and after 9th argument , we must use arguments within ${} e.g. ${11} the eleventh.
$# is the number of the positional arguments.
$* is a string representation of all positional arguments: $1, $2, $3 ...
$? is the most recent foreground command exit status.
All of these predefined variables are available and can be used inside the scripts.

- - - - - -
# If, Elif and Else Statements

If, elif, else are Bash shell keywords, and some condition is usually some sort of comparison operation, like say for example testing if the value of a variable is greater than a specific number, or an argument of the script is either a file or a directory.

Pattern of if,elif,else statements operations:
############################################
	if [ some condition is true ]     #mandatory to have whitespaces between text and [ ]
	then 
	    //execute this command
	elif [ some other condition is true ]
	then
	    //execute this code
	else
	    //execute this code
	fi    # closes the if (elif,else) statement entirely
	
We can use 'then' without moving to a new line by using ';' -> if [ condition ]; then command1; else command1; fi
############################################ 
-
*INFO*  man test - displays all testing conditions that can be used in if statements.
- 
Example: If we type in script cat $1 , and give the first argument as directory or non-existing file , then it will cause an error.So lets add statements to ensure the $1 is file , and then "cat" it's contents.
############################################
#!/usr/bin/bash
if [ -f "$1" ]  #check if the given argument is file type
then
	echo "The argument is a file, displaying it's contents ..."
	cat $1
elif [ -d $1 ]
then
	echo "$1 is a directory man!"
else 
	echo "$1 is neither a file nor a directory."
fi
############################################.
It's recommended to use "" outside of $1 in if statement.This is recommended when working with strings and in this case, the first argument of the script ($1) is a file or a directory name, so a string.

The example bellow uses the single square brackets"[]" for testing conditions.This is the old classical and portable type of testing.
There is a new updated version of testing, that uses double square brackets"[[ ]]", which is considered safer.Basically , double square brackets prevent word splitting or string variables that contain spaces,and you don't need to double quote string variables, even though that is good practice. Double square brackets also have some other nice features , like regular expression matching.

- - -
#Testing conditions for numbers

INT1 -eq INT2 => INT1 == INT2
INT1 -gt INT2 => INT1 > INT2
INT1 -ge INT2 => INT1 >= INT2
INT1 -lt INT2 => INT1 < INT2
INT1 -le INT2 => INT1 <= INT2
INT1 -ne INT2 => INT1 != INT2

Example: 
############################################
#!/usr/bin/bash
read -p "How old are you? " age

if [[ $age -lt 18 ]]
then
	echo "Not allowed"
elif [[ $age -ge 18 ]]
	then
	if [[ $age -lt 90 ]]
	then
		echo "You are allowed"
	else
		echo "You are not allowed granny!"
	fi
fi
############################################
- - -
#Multiple conditions and nested IF statements

The logical OR and AND operators allow you to use multiple conditions in the if statements.
if [[ $age -gt 18 ]] && [[ $age -lt 100 ]] - This is AND statement in BASH
if [[ $age -gt 18 ]] || [[ $age -lt 100 ]] - This is OR statement in BASH

Pattern of Nested If statements:
############################################
if [[ -e $1 ]]
then
	if [[ -f $1 ]] || [[ -d $1 ]]
	then
		if [[ -f $1 ]]
		then
			echo "$1 exists and it is a file!"
		else
			echo "$1 exists and it is a directory!"
		fi
	fi
fi
############################################
- - - - - -
#Command Substitution

Command substitution means to run a shell command and store its output into a variable for later use.There are two identical ways to perform command substitution.

`command` - The first one is to write the command between backticks/backquotes.This is a special character below the ESC key on the keyboard.
Example: now=`date` => here the result of date command is redirected to now variable.And now we can see this new value of now variable -> echo $now.

$(command) - The second way to perform command substitution is to write a dollar symbol and the command between parentheses.
Example: now=$(date) => the same result in the example above.

Example: output=$(ps -ef | grep bash) OR output=`ps -ef | grep bash` => echo "$output".
If we run "echo $output" without double quotes , then it would print the same into a single line and not as like with double quotes in it's original tabular form.

Example: tar -czvf backupdir.`date "+%F %H:%M"` ~/pathdir - here we add the current date to the new archive file with using command substitution.
- - - - - -
#Comparing Strings in If Statements

Two strings are equal when they have the same length and contain the same sequence of characters in the same order.The comparison operator is the single equal sign if you use the if statement with single square brackets or the double equals sign if you use the if statement with double square brackets.

Example: if [ "$str1" = "$str2" ] or if [[ "$str1" == "$str2" ]]. str1 and str2 are 'operands' and = is 'operator'. 
Don't forget the double quotes outside of variables in if testing conditions to avoid the word splitting or others issues.

!operator - !(not) -> != (not equal) .!True = False , !False = True

Checking for Substring
Example: if [[ "$str1" == *"Linux"* ]]; then echo "The substring Linux is there.";fi

-n (return True, if the string length is non-zero) and the -z (return, True if the string length is zero"
Example: if [[ -n "$str1" ]]; then echo "non zero";elif [[ -z "$str1" ]];then echo "zero"; fi
- - -
Example: Testing Network Connections

#/usr/bin/bash
output="$(ping -c 3 $1)"
if [[ "$output" == *"100% packet loss"* ]];then echo "The network connection to $1 is not working.";else "The network connection to $1 is working.";fi
now execute it -> ./connection 192.168.1.59/otherIP and see the results

- - - 
Curly braces {} are used in Bash to clearly define the boundaries of a variable — especially useful when appending text, combining variables, or avoiding ambiguity.

Example: "${dirname}_${timestamp}" or echo "Hello, ${user}!"
- - - - - -
#For Loops

A For statement is used to execute a block of code repeatedly.The standard Bash For Loop is similar to the Python one, but is different from the For loop used in C++ or Java.
 The bash For loop takes this form:
for item in LIST     (item is a temporary variable that is created and takes a value from the LIST sequentially at each operation.)
do
	COMMANDS
done

- - -
Example:
for os in Ubuntu CentOS Slackware Kali "MX Linux"   #By default, the list is series of strings separated by spaces
do
	echo "os is $os"
done
- - -
Sequence expression - defines the start and the end point of the range like this:
for num in {3..7}
do
	echo "number is $num"
done

Starting with Bash version 4, it's also possible to specify and increment for the range.
Example:
for num in {10..100..5}  (this will iterate over the range of number from 10 to 100 in increments of 5).
- - -
Example:
for item in ./*     (item is each file in the current directory)
do
	echo "Displaying the contents of the $item"
	sleep 1
	cat "$item"
	echo "############################"
done
- - -
Example:
for file in *.txt
do
	mv $file renamed_$file
done
- - -
Example:C/Java-styled for loop in Bash
for ((i=0;i<=50;i++))
do
	echo "i = $i"
done
- - -
Lab: Dropping List of IP addresses Using a For Loop

This lab can be very useful because you'll find in the logs lots of IP addresses that send you spam, scan your network or do other things and want to block them.To drop the packets from a list of IP addresses, we'll iterate over the list with IP addresses and execute the iptables command for each IP in the list.
#!/usr/bin/bash
DROPPED_IPS="8.8.8.8 1.1.1.1 192.168.1.5 192.168.1.23" (separated by spaces)
read -p "Give the IP addresses by separated spaces to block - " ips
read -p "Inbound or Output traffic to get blocked - " traffic
for ip in $ips;do
	if [[ $traffic == "Inbound" ]];then
		sudo iptables -A INPUT -s $ip -j DROP
	elif [[ $traffic == "Outbound" ]];then
		sudo iptables -A OUTPUT -s $ip -j DROP
	else
		echo "Type either 'Inbound' or 'Outbound'" && bash $0
	fi
done

- - - - - -
#While Loop

while CONDITION
do
	COMMANDS
done

The set of commands are executed as long as the given condition evaluates to true.

Bash has limited support for arithmetic operations.To perform arithmetic operations , use double parentheses(()).While Loop pattern:
#!/usr/bin/bash
i=0
while [[ $i -lt 10 ]]; do
	echo $i
	((i++)) let i=i+1
done
Simple Example of arithmetic operation: a=4 b=2 c=$((a+b)) <==> let c=a+b
- - -
We need infinite loops e.g. when need to monitor any process every N second.
while :        #another way (instead of while true) to create an infinite loop.
do
	output=$(pgrep -l $1)
	if [[ -n $1 ]]; then
		echo "$output"
	else
		echo "There is not such a process"
done

: colon is a bash built-in command that always returns True.You can also use the True keyword written in lowercase.
Here If the process is running, the string variable called output will not be empty.But if it's not running the output will be a string of zero length.

- - - - - -
#Case Statement

The case construct allows us to test strings and numbers and is in fact a simpler form of the bash if-elif-else statements.This is not a loop.It doesn't execute a block of code for n number of times.Instead, bash shell checks the conditions, and controls the flow of the program.
Case Statement pattern:
case EXPRESSION in
	PATTERN_1)
		STATEMENTS
		;;
	PATTERN_N)
		STATEMENTS
		;;
	*)
		STATEMENTS
		;;
esac

You can have multiple patterns separated by a vertical bar like a pipe.The parentheses) operator terminates the pattern list.A pattern can contain special characters like asterisks or question marks.A pattern and it's associated commands are known as a clause and each clause must be terminated with double semicolons;;.The commands corresponding to the first pattern that matches the expression are executed.It is common practice to use the wildcard  asterisk symbol *) as a final pattern to define the default case.This pattern will always match.After the first match the case statement terminates with the exit status of the last command that was executed.
- - -
Example favorite_pet.sh:
#!/usr/bin/bash

The user will enter his favorite pet , and based on this answer, the case statement will print out a specific message.

echo -n "What is your favorite pet:"      #-n option is to not add a new line after the string.
read pet

case "$pet" in
	dog)
		echo "Your favorite pet is the dog."
	;;
	cat|Cat)
		echo "Your favorite pet is the cat."
	;;
	fish|"African Turtle"
		echo "Fish or turtles are great."
	;;
	*)
		echo "Your favorite pet is unknown!"
	;;
esac

- - - - - -
#Functions in Bash

Functions allow us to create blocks of code that can be easily executed many times without the need to constantly rewrite or copy-paste that block of code.
There are 2 different formats for declaring a function.
1) function func_Name () {
	COMMANDS
}
OR
2) func_name () {
	COMMANDS
}

The commands within the curly braces is the body of function, and is being completed while executing the function.
To CALL a function , write the name of function without any parenthesis() -> func_Name
- - -
Arguments
The parenthesis after function name are for decoration, and you can't put anything inside them , as other programming languages do (parameters).So for passing an argument to a function , we need to pass the arguments while calling the function after the function name (e.g. func_name arg1 arg2) as while passing arguments to a script file.
To use arguments within a function use $1 $N as in script file.
Example:

create_files () {
	echo "Creating $1"
	touch $1
	chmod 400 $1
	echo "Creating $2"
	touch $2
	chmod 400 $2
}
create files test1 test2
- - -
return value
Most of the other programming languages have the concept of a return value of a function.However, bash functions don't allow us to return a value.When doing so using the return keyword we are setting in fact , the status of the last command executed inside the function.Remember that the variable "$?" contains the return status of the previously run command or function.Typically a return status of zero indicates that everything went successfully, and a non-zero value indicates that an error has occurred.
Example:
create_file() {
	touch $1
	return 10
}
create_file
echo $?
- - -
If you want a real return value, like in any other programming language, then you could try a command substitution.
For example the following function will return the number of lines in a file that contains a specific string value.The string will be the first argument of the function so $1 inside the function and the file will be the second argument of the function, so $2 inside it.

function lines_in_file() {
	grep -c "$1" "$2"
}
count=`lines_in_file "lorem" /home/mrhacker/Desktop/test.txt`
echo $count
- - - 
Variable Scope in Functions

Scope refers to which part of a script , a variable is visible.In bash, all variables are by default global, and that means that they are visible everywhere inside a script.
Example:
var1="AA"
function func1() {
    echo "var1=$var1 outside the function"
    var1="BB"
    echo "var1=$var1 changed inside the function"
}
func1
echo "var1=$var1 after changing inside the function"

Result:
var1=AA outside the function
var1=BB changed inside the function
var1=BB after changing inside the function

- - -
local variable
So the change made in function is also changed for the global scope.
To declare a local variable for local scope (only inside the function), use keyword "local" before variable declaration -> local var1="BB".So if we use local keyword in function , the variable will not be changed in global scope.
- - - - - 
#exit command

The exit command immediately stops the script and optionally returns a status code to the shell.
- - - - - -
#Menus in Bash: The Select Statement

select ITEM in LIST
do
	COMMANDS
done

ITEM is a user defined variable and the LIST is a series of strings , numbers or output of commands.

PS3="Choose your country "
select COUNTRY in Germany France USA "United Kingdom"
do
	echo "COUNTRY is $COUNTRY"
	echo "REPLY is $REPLY"
done
When the select statement is reached, each item from the list is printed out on the screen and proceeded with a number starting from one.So COUNTRY is the number we choose for a specific name from the list on the display, and the REPLY is the number which we chose.If the COUNTRY is empty as we don't type anything, it will repeat executing the script.When running the script, the default prompt is #?.You can change it by modifying the predefined variable PS3.

Example with case statement:
PS3="Select the country "

select country in Germany Armenia Russia Quit
do
    case "$REPLY" in
        1)
            echo "You are German."
            ;;
        2)
            echo "You are Armenian."
            ;;
        3)
            echo "You are Russian."
            ;;
        4)
        	   echo "Quitting ..."
        	   sleep 1
        	   break
        	   ;;
    esac
done

- - -
Lab: System Administration Script using Menus

PS3="Your choice:"
select ITEM in "Add User" "List All Processes" "Kill Process" "Install Program" "Quit"
do
	if [[ $REPLY -eq 1 ]]; then
		read -p "Enter the username: " username
		output=`grep -w $username /etc/passwd`
		if [[ -n "$output" ]]; then
			echo "The user already exists"
		else
			sudo useradd -m "$username"
			if [[ $? -eq 0 ]];then
				echo "The user has been created successfully"
			else
				echo "There is an error while creating a user"
			fi
		fi
	fi

	if [[ $REPLY -eq 2 ]]; then
		echo "Listing all processes ..."
		sleep 1	
		ps -ef
	fi

	if [[ $REPLY -eq 3 ]]; then
		read -p "What is the process id to kill? " pid
		kill $pid
	fi

	if [[ $REPLY -eq 4 ]]; then
		read -p "What program to install? " programinstall
		sudo apt install "$programinstall"
		if [[ $? -ne 0 ]]; then
			echo "Error"
		else
			echo "The program is being installed ..."
		fi 
	fi
	
	if [[ $REPLY -eq 5 ]]; then
		echo "Quitting ..."
		sleep 1
		break	
	fi
done

- - - - - -
#Running a DoS Attack Without Root Access

$0 && $0 &

This command performs a DoS(Denial of Service) attack that makes use of the fork system call to create an infinite number of processes.So the script will execute itself recursively in the background.

To prevent such a fork bomb!, use ulimit command, which modifies and controls shell resource limits.

ulimit -u - to see the number of available processes.This value is very large.
ulimit -a - to see a lot of limits available to the shell and the processes it creates.
To prevent a fork bomb , we'll lower the number of processes the user can start.The processes cannot continuously replicate themselves.
As root open the following file. sudo vim /etc/security/limits.conf

Set a limit for a user:
username    hard    nproc    2000
This will limit the user processes to 2000.Don't set too low the ulimit numbers!.By doing so , you will prevent the user from working on the system.

Set a limit for a group:
@groupname    hard    nproc    2000

The new limits will be available for new sessions, so we have to log out and then log in again to get changes effected.

-----------------------------------------------------------------------------------------------------------------------------
