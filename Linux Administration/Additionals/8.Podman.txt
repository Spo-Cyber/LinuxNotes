		#Containerizing Applications With Podman
	
#Containers

Containers are lightweight, standalone, and executable software packages that include everything needed to run a piece of software , including the code, runtime, system tools, libraries and settings.
Containers have several key features:
*Consistency - Containers make sure that an app runs the same way no matter where it is. Whether it's on your computer, in testing, or in production, it will behave the same. This solves the "it works on my machine" problem.
*Isolation - Each container runs by itself, so apps inside containers don't mess with each other. This also makes it safer, because if one container has a problem, it won't affect others.
*Efficiency - Containers are lighter and use fewer resources than traditional virtual machines because they share parts of the computer's operating system. This makes them faster and more efficient.
*Portability - Containers are easy to move around. You can take them from your laptop, to a test server, and then to a production server without needing to change anything.
*Scalability - tâ€™s easy to add more containers when you need them. This is helpful when the demand for an app increases, especially for systems built with microservices or cloud apps.
*DevOps Integrration - Containers fit perfectly with DevOps practices. They help developers and operations teams work better together by making it easier to test and deploy apps quickly and consistently.
For system admins, containers make it simpler to deploy, manage, and maintain apps. They save resources and make system architectures more flexible and reliable.
- - - - - -
#Podman

Podman(Pod manager) is an open source tool for developing, managing and running containers.Podman manages the entire container ecosystem using the Libgpod library.
*Daemonless - Unlike Docker , Podman doesn't require a daemon to run, which means less overhead and improved security.
*Rootless - Podman can run containers without root privileges, and that's a significant security advantage.
*OCI Compliant - It's fully compatible with the Open Container Initiative standards, ensuring interoperability.
*Kubernetes Integration - Podman can generate Kubernetes YAML , making it easier to transition from local development to cluster deployment.
- -
install with 'sudo apt install podman'
verify the installation 'podman --version'.You should see the number version displayed confirming that Podman is ready to use.
Since Podman is Docker Compatible, it can use the same images as Docker.
An image in the context of containerization is a lightweight , standalone and executable package that includes that application code, runtime, libraries, and dependencies required to run a piece of software. 
podman pull softwareName - here podman pull docker.io/alpine or just alpine.which is very lightweight linux distribution.
podman images - to list all the downlaoded container images. 
podman rmi imageName/imageID - to remote a specific image.
podman run -it alpine /bin/sh - starts an interactive alpine container.
A container is a runable instance of an image , that encapsulates an application and its environment, providing isolation from other containers and the host system.It shares the host OS kernel , but runs as an isolated process in user space, allowing efficient , consistent, and portable application deployment across different computing environments.
podman ps - to list the running containers.
podman ps -l - to list all containers, including stopped ones.
podman stop containerID - to stop container.
- -
#Setting up a web server

Lets run nginx server on alpine linux in Podma.
podman pull docker.io/nginx:alpine
podman run -d --name my_nginx -p 8080:80 nginx:alpine = -d(runs container in detached mode in the background), --name(names our container for easy reference), -p 8080:80(maps port 8080 on our host to port 80 in the container). 
podman run -d --name my_nginx -p 8080:80 -v ./index.html:/usr/share/nginx/html/index.html:ro nginx:alpine = runs custom index.html page.-d(mounts our custom index.html into container).
podman container inspect my_nginx - to get information about this specific container.This command outputs the container's information in JSON format.

Now as we have nginx server running in container , we have several benefits as sysadmin:
1.Your nginx server is contained reducing potential conflicts with other system components.
2.If need more nginx servers, just spin up more containers.
3.This setup ensures that your development , testing and production environments can be identical.
4.You can easily manage different versions of nginx or Alpine for different projects.
5.The alpine based image, keeps your resource usage low, allowing for better hardware utilization.
6.Updating or rolling back your nginx server is as simple as stopping one container and starting another.
7.This container can be easily moved between different Linux systems running Podman.
- - -
#Pods

A pod is a group of one or more containers that share the same network namespace.This means they can communicate with each other using local host, share the same IP address, and easily share storage volumes.

# Create the pod
podman pod create --name wordpress-pod -p 8080:80

# Run the MariaDB container in the pod
podman run -d --pod wordpress-pod --name mariadb \
    -e MYSQL_ROOT_PASSWORD=rootpassword \
    -e MYSQL_DATABASE=wordpress \
    -e MYSQL_USER=wpuser \
    -e MYSQL_PASSWORD=wppassword \
    docker.io/library/mariadb:latest

# Run the WordPress container in the pod
podman run -d --pod wordpress-pod --name wordpress \
    -e WORDPRESS_DB_HOST=127.0.0.1:3306 \
    -e WORDPRESS_DB_USER=wpuser \
    -e WORDPRESS_DB_PASSWORD=wppassword \
    -e WORDPRESS_DB_NAME=wordpress \
    docker.io/library/wordpress:latest
- - - - - -
#Monitoring Pods and Containers

podman pod ps - to check the status of the pod and containers, to ensure everything is running correctly.
podman stats - it is used to display a live stream of resource usage statistics for one or more containers.
podman stats -a - shows statistics for all containers, not just the running ones.
podman stats -a -i 3- to set timeout.
podman stats -a --no-stream - displays the first result and exists.We can also redirect output to file for future use '> a.txt'
podman pod inspect podname - to find information about pod and containers running in the pod.Will display pod information in JSON format.
podman logs containerName -  display information by logs about container and pod.
podman logs containerName -f - shows in real-time.
podman logs --since N containerName - to show logs from the last N hour's'
podman logs --tail N containerName - to tail.
podman pod start/stop/rm podName - to start/stop/remove the pod.Before removing need to stop, but without stopping can do '-f (force)'
- - - - - -
#Data persistence

Data persistence is crucial for ensuring that the data generated and used by your containers is not lost when the containers are stopped or removed.
podman pod create --name wordpress-pod -p 8080:80
podman volume create mariadb_data
podman volume create/rm wordpress_date - to create/remove volumes
podman volume ls - to list volumes
podman volume rm wordpress_data -f - to remove without stopping it.
podman volume prune - to delete unused volumes. 

podman run -d --pod wordpress-pod --name mariadb \  
    -v mariadb_data:/var/lib/mysql \		-v ... (mounts the volume named mariadb to the var/lib/mysql)
    -e MYSQL_ROOT_PASSWORD=rootpassword \
    -e MYSQL_DATABASE=wordpress \
    -e MYSQL_USER=wpuser \
    -e MYSQL_PASSWORD=wppassword \
    docker.io/library/mariadb:latest
This way , even if the mariadb container is stopped or removed, the database data remains safe and can be reused by a new container.

podman run -d --pod wordpress-pod --name wordpress \
    -v wordpress_data:/var/www/html/wp-content/uploads \
    -e WORDPRESS_DB_HOST=127.0.0.1:3306 \
    -e MYSQL_USER=wpuser \
    -e MYSQL_PASSWORD=wppassword \
    docker.io/library/mariadb:latest
This way , even if the wordpress container is stopped or removed, the database data remains safe and can be reused by a new container.
