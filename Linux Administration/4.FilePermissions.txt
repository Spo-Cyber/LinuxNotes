					File Permissions

r-read(4)
w-write(2)
x-execute(1)
'-' -no permissions(0)

File permissions are displayed in the result of the ls -l command, at the beginning of the line.It is shown like drw-r-xrw- (or in stat command). The first letter d/- (directory or file), The 234th chars are permissions for owner(r,w,- so here read write but not execute), The 567th chars are permissions for group (r,-,x so here read , execute but now write), And the 8,9,10th chars are for other users like public.
- - -
Only root or file's owner can change the file's permissions

chmod [WHO][OPERATION][PERMISSIONS] filename - change file permissions
chmod -v ... (for verbose text after executing the command)
chmod --reference="TheFileFromWhichShouldInherit" /InheritingFile (to inherit permissions from file in reference statement to InheritingFile)

WHO -> u(user)/g(group)/o(others)/a(all users)
OPERATION -> -(remove specified permissions)/+(add specified permissions)/=(change the current permissions to specified permissions)
PERMISSIONS - r/w/x

Examples:
chmod u+x test.txt (add execute permission for the owner of the file)
chmod og+rw test.txt (add read and write permissions for the owner and group of the file)
chmod u-x,g+w,o-rwx test.txt (all permission sets in one statement)
chmod a+rw,a-x test.txt (add read and write permissions and remove the execute permission for all users on this file)
chmod ug=rw,o= test.txt (owner and group have read and write permissions but other users have nothing)
- - -
#Absolute Changing Mode

Octal(Numeric) Notation of file permissions
Examples:
rw-rw-r-- = (4+2+0)(4+2+0)(4+0+0) = 664
r-xrw---x = (4+0+1)(4+2+0)(0+0+1) = 561
--x-w-r-- = (0+0+1)(0+2+0)(4+0+0) = 124

chmod 446 test.txt => r--r--rw-
chmod 777 test.txt => rwxrwxrwx
chmod 400 test.txt => 4--------
- - - - - - - - - - - - - - - - - - - -
#Directory Permissions

--Read--
Only the read permission on a directory, means that the directory's contents can be shown by running "ls" and it doesn't give an access to the contents of the directory.And because of that , we can't remove any file within that directory.While running the "ls" command beside of showing contents of directory, it also shows "cannot access" error, because the "ls" command tries to access the contents to see the type, permissions, owner... .
Run \ls , to read only the contents of directory and not its metadata, so won't be any error related with accessing any file in directory

--Write--
IF EXECUTE PERMISSION is not set , the write permission DOES NOTHING.But if there is set the execute permission, the write permission does 'creating new files/subdirectories, rename or delete existing files/subdirectories'

--Execute--
Execute permission means access to that directory's contents.We can move into the directory(cd dirName), and freely execute commands which are in write permissions functioning.

The directory's permissions are more important than it's files.
- - - - - - - - - - - - - - - - - - - -ch
#Changing File Ownership(chown, chgrp)

!Only root can change the file's owner.

chown [ownername/UID] [file/directory] [filesoptional...]
chown +1257(UID) filename - the "+" sign is better, because if there was a user by username 1257, the file's owner would be set to that user whose name is 1257.but the "+" sign sets by UID only.

chown username:groupname (or UID/GROUPID) filename - set owner and group at the same time

chgrp [groupname/GID] filename - to set group to file
chown :groupname filename - to set only group as well

chown -R - to set owner group permissions recursively within directory
- - - - - - - - - - - - - - - - - - - - -
#Special Permissions

RUID(Real User ID) - is the id of the user who initially logs in and never changes.
EUID(Effective User ID) - is the id of the user who executes a command in the shell.

Besides r,w and x for the owner, group and others, there are 3 extra special permissions for each file or directory: SUID(Set User ID), SGID(Set Group ID) and Sticky Bit.
These special permissions are for a file or directory overall, not just for a user category.

----SUID(Set User ID)--

When an executable file with SUID is executed, then the resulting process will have the permissions of the owner of the command, not the permissions of the user who executes the command.

Example.
	-rwxr-xr-x. 1 root root 48144 Oct 23 19:36 /usr/bin/cat (here as there is not SUID "like -rwx and not -rws") the "cat" command who will use the process will be executed by permissions of executor.
	BUT HERE
	-rwsr-xr-x. 1 root root 114072 Feb 25 02:09 /usr/bin/cat (because of there is set SUID("-rws"), this means that the "cat" command whoever will execute, it will have permissions of it's owner(root) no matter who executes it).

chmod 4755 filename (4 means SUID).Here it will display -rwsr-xr-x.But if we set 4655(so x permission will be removed), it will be displayed with capital S (-rwSr-xr-x).

Setting SGID:
	Absolute Mode: chmod 4XXX file
	Relative Mode: chmod u+s file

To find files with SUID special permission
find /path -perm -4000 -ls (find files/directories with at least this permissions)

----SGID(Set Group ID)--

SGID is set mainly to directories.
If SGID is set on directories, all files or directories created inside that directory will be owned by the same group owner of the directory where SGID was configured.
It ensures that all new files and subdirectories created inside , inherit the group ownership of the parent directory. 
This is useful in creating shared directories, which are directories that are writable at the group level.

Setting SGID:
	Absolute Mode: chmod 2XXX directory.
	Relative Mode: chmod g+s directory.

Example.
	drwxrws--- 2 mrhacker programmers 4096 Jul 14 10:38 /programming/
	where "s" in group permissions means special group permission, where the directory will be opened or modified only by "programmers" group.

----Sticky Bit--

The Sticky Bit is mainly applied to directories.
The sticky bit allows to create a directory that everyone can use as a shared file storage.The files are protected because, no one can delete anyone else's files, because will receive "Operation not permitted error"

Setting Sticky Bit:
	Absolute Mode: chmod 1XXX directory.
	Relative Mode: chmod o+t directory.

Example.
drwxrws--t 2 mrhacker programmers 4096 Jul 14 10:38 /programming/
"t" means sticky bit which is only for "others" permissions
"T" when execute permission for "others" is absent
- - - - - - - - - - - - - - - - - - - - -
#Umask

When creating a new file or directory, the system  sets on them the default permissions (0666 for files, 0777 for directories).But their default permissions are set by umask which subtracts from that values the mask and sets as default permissions of file or directory.For Example while running "umask" command it displays 0002, so "for files it will be 0666-0002=0664" and "for directories it will be 0777-0002=0775" as default permission values.

So to change the default values of permissions we need to change umask => for example to set 0442 for files by default when creating them we need to calculate as "0666 - umask = 0442 => umask=224" => SO THE COMMAND IS "umask 224" for setting that value

But this is temporary , only for current terminal session.To set it permanent we need to write umask command in e.g. .bashrc file if using bash terminal.
- - - - - - - - - - - - - - - - - - - - -
#File Attributes

The attributes define the properties of the files.
Attributes are "set" or "cleared".

lsattr /path - to list attributes within directory.'-' means cleared and a character means set any format.
For example --------------e------- ./Test (only e is set , which means extent format , and it indicates that the file is using extents for mapping the blocks on disk.Extents are a way the filesystem manages disk space more efficiently than traditional block-based allocation)
lsattr -R /path - recursively show attributes within directory

sudo chattr +/-char - to set or remove attributes MOSTLY by sudo
sudo chattr +a - to only append or add to the file, and can't remove something from it.
sudo chattr +A - to not change the access time of file when it accesses, to avoid lot of input/output in system.
sudo chattr +i - to freeze the file, as file can't be modified even by sudo (deleted, renamed, no link created to it, most of metadata can't be modified).so to delete the file, we need to "chattr -i" and then can delete it.
sudo chattr -R +attr - recursively to set attributes into directory
