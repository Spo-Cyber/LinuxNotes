FILE SYSTEM

!!! Everything in Linux is a file
- - - -
The Filesystem Hierarchy Standard

/bin (contains binaries or user executable files which are available to all users)
/sbin (contains applications that only the superuser will need)
/boot (contains files required for starting your system)
/home (is where you will find your users' home directories. Under this directory there is another directory for each user, if that particular user has a home directory.root has its home directory separated from the rest of the users' home directories and is /root)
/dev (contains device files)
/etc (contains most, if not all system-wide configuration files)
/lib (contains shared library files used by different applications)
/media (is used for external storage will be automatically mounted)
/mnt (is like /media but it's not very often used these days)
/tmp (contains temporary files, usually saved there by applications that are running.Non privileged user can temporarily save files there)
/proc (contains information about computer hardware e.g. CPU, RAM memory.The files and directories are generated , when computer starts or running and things
changes).E.g. to see info about cpu -> cat /proc/cpuinfo, or for memory -> cat /proc/meminfo
/sys (contains information about devices, drivers and some Kernel features)
/srv (contains data for servers)
/run (is new,different distribution use this directory in different ways.It's a temporary filesystem which runs in RAM so its contents will vanish when the system reboots.This directory is used only by processes)
/usr (contains many essential files and directores needed for the system to function properly in a multi-user environment)
/var (typically contains variable-length files such as logs which are files that register events that happen on the system)
- - - -
df (for file system space usage), df -h (for easier displaying like not in kilobytes but in Gb)
tree (for displaying directory tree), tree -f (also showing absolute paths of each directory and file), tree -d (list directories only)
sudo du -sh /path (to display the size of the path in human readable format)
______________ ______________ ______________ ______________ ______________
--------------------------------------------------------------------------
#ls command
ls (list directory contents) , ls /some/path (to list /some/path's list) and if just only ls then the list of the current directory
ls /path1 /path2 /path3 ... ~/path4 (to display n different paths at once),ls -R (to display the contents of all the directories in it 'RECURSIVELY')
ls /path -dl (only the /path directory and not it's content), ls -l (displays the content in long list format)
ls -S (sorts the files by size)
ls --hide=[OPTION] e.g. ls --hide=*.conf (to display all content besides all .conf file)
ls -a (displays all files and directores includeing hidden ones), ls -1 (listing on a single column)
ls -R (displays recursively contents in each directory)
ls -r (displays in reversed order, or --reverse)
______________ ______________ ______________ ______________ ______________
--------------------------------------------------------------------------
#File Timestamps

date - for displaying system's current time
date --set="2 OCT 2020 18:00:00" (to set system's date)

cal (displays this month's calendar)
cal 2021 (displays calendar of a specific year)
cal 2 2021 (displays a specific calendar of a specific year)
cal -3 (displays previous, current and next month's calendars)

stat /path (displays the 'accessed(last time read), modified(last time got text change in it), changed(last time accessed,renamed,owner or group permission changed, timestamp changed - "so metadata changed")' timing parameters of files)
ls -lu (to see the access time)
ls -lt (to see the modification time)
ls -lc (to see the changed time)
ls -l --full-time (to display the full time including time zone,seconds and milliseconds)
ls -F (to see each file or directory by its indicators)

touch filename -> if the file doesn't exist it will create a file by that filename , but if exists it will update all three timestamp options(atime, mtime, ctime)
touch -a filename (only to update atime and ctime)
touch -m filename (only to update mtime and ctime)
touch -a/-m -t 202501021010.13 (to set manually time depending on atime or mtime what have we set, to set the time 2025year, 01month, 02day, 10:10, 13seconds) applying -- NUMBER TIME FORMAT
touch -a/-m -d "2025-01-02 10:10:13" applying -- DATE TIME FORMAT
touch filename1 -r filename2 (for updating timestamp of filename1 by the timestamp of filename2)
______________ ______________ ______________ ______________ ______________
--------------------------------------------------------------------------
#File Types

file /filepath (displays the file's parameters)
ls -lF (to identify what type of file)
file /path/* (displays all file types in the path by the sign *)
______________ ______________ ______________ ______________ ______________
--------------------------------------------------------------------------
#Viewing Files

cat (concatenating file(s) into one another. e.g cat file1 file2 > file3 'to concatenate file1,file2 to file3')
cat -n (to also display line numbers starting each line)
less (more flexible that 'cat' and 'more', can view page-by-page via ctrl+f and ctrl+b or scrolling, ?something or /something finds something in less page)

tail (view last 10 lines), tail -n 23 (view last 23 lines), tail -n +54 (view lines beggining from line 54)
tail -f (to view the file in real-time.like when "tail -f /var/log/auth.log", and when I will log or try to log as root via sudo su, it will display my attempts)
head (displays first 10 lines), head -n 3 or head -3 (view first 3 lines)

watch 'any command' (every 2 seconds watches what is being changed) FOR EXAMPLE - watch ls ~/Desktop (watches the list of desktop, and if anything will be added or deleted, it will display).
watch -d ls (highlights differences in changes)
watch -n 3 (to set 3 seconds of interval)
______________ ______________ ______________ ______________ ______________
--------------------------------------------------------------------------
#Files and Creating Directories

touch 'filename' (for creating an empty file)
mkdir 'directory name' (for creating directory), mkdir -v 'dirname' (with verbose)
mkdir -p dir10/dir4 (if doesn't exist dir10 it forces to create and dir4 in it also)
______________ ______________ ______________ ______________ ______________
--------------------------------------------------------------------------
#Copying Files and Directories

cp /filepath /destinationfilepathname (copying the file and pastes to destination path by its given filename), if exists the /destinationfilepathname it will overwrite. cp -v (by verbose prompting)
cp -i /path1 /path2 (to not overwrite automatically the file but at first to prompt if I wanna)
cp /file1 /file2 /file3 /path (to copy that 3 files to the path) 
cp -r /srcdirectory /dstdirectory (to copy directory to destination recursively)
cp -p /dir1 /dir2 (to save the owner and group permissions while copying, because by default it copies and assigns the details of another user permissions)
______________ ______________ ______________ ______________ ______________
--------------------------------------------------------------------------
#Moving and renaming files and directories

mv /file1 /path1/ (move file1 to path1)
mv /path1/file1 /path1/file2 (rename file1 to file2), mv /path1/file1 /path2/file2 (to move to another directory and rename it)
mv -n /path1/file1 /path2/ (if in path2 there is not any file called file1 , then move it)
mv -i /file1 /path2/ (prompt if there is a file called by same name, to overwrite or no)
______________ ______________ ______________ ______________ ______________
--------------------------------------------------------------------------
#Removing files and directories

rm file1 (to remove file), rm -i file3 (prompt to remove or no), rm -v file2 (remove by verbosing)
rm dir1 -r (to remove directory)
rm file (if the file belongs to root but is in someone's ~ , then can rm but it will prompt to remove or no, and if there are lots of files like that , for not to answering to each prompt just do "rm file1 -f" by forcing to remove)
rm -i file (to prompt , to remove or no)
shred -vu -n 30 file1 (overwrite the file 30time and then remove, that if anyone wanted to recover it couldn't because it was renamed'encrypted' 30times)
______________ ______________ ______________ ______________ ______________
--------------------------------------------------------------------------
#Piping and Command Redirection

Every Linux command or program has three data streams -> 1.STDIN(0), 2.STDOUT(1), 3.STDERR(3)

command1 | command2 | command3... (to connect 2 or more commands at a time, by redirecting from start to end)
wc file1 (prints count of lines, words, characters of file), -l (for lines), -w (for words), -c (for characters)

command > fileX (to write the results of command into fileX. e.g. ls -l > ls.txt)
command/text >> fileY (results of command or text to append to fileY)
tty (to print the name of 'terminal file', e.g. the result of any terminal windows is /dev/pts/12, and I type a command 'ifconfig > /dev/pts/12' from another terminal (/dev/pts/2), it will print the result into that other terminal window)

2>&1 (>& means that the 2(STDERR) will behave as (1)STDOUT. e.g. head -1 /etc/passwd /etc/shadow > output.txt 2>&1 -> there will be printed the first line of /etc/passwd and the permission error of /etc/shadow in the output.txt file)

cut -d"charX" -fY (to cut the text into parts by splitting of charX and taking the Yth part. e.g. there is a file called a.txt and the text is barev%aper%jan and I execute 'cut -d"%" -f1' it will print 'barev', if the same with -f2 then 'aper')
someCmd | tee output.txt (when redirecting to this command any command, it prints the result in terminal and does 1>output.txt. e.g. "ls -la | tee output.txt" will print the list of that directory on terminal and automatically writes/overwrites in output.txt)
______________ ______________ ______________ ______________ ______________
--------------------------------------------------------------------------
#Finding files and directories

which (to find where located commands, programs ...), which -a (to display all the paths that the program has in system e.g. versions)

plocate -> find files by name, quickly, because not searching files in real-time but from pre-built database.The database is being updated automatically or manually by command 'sudo updatedb'.The alternative is "locate" as plocate is the symlink of locate.
plocate -b name (if the name is in the basename of file 'name of the file')
plocate -r text (use regular expression.e.g. plocate -r '/passwd$' ending by /passwd and no any continuation)
plocate -e (to check if file exists in real-time or no, because if it is in database but doesn't exist anymore it will show yet)
plocate -i (ignore case)

find /path -name/-iname(ignoring case) fname (searches in subdirectories too)
find /path -name fname -delete (to find and delete the file)
find /path -name fname -ls (do the ls command after finding)
find /path -name fname -type d(directory)/f(file) (to specify what type of data)
find /path -name fname -maxdepth/-mindepth 4 (to dive till 4 subdirectories and no more / mindepth...)
find /path -name fname -perm 755 (find by permissions.here is owner-7(rwx), group-5(rx), others-5(rx))
find /path -name fname -type f -size 100k/M/G/c (search by size 100k, examples +100M(more than 100M), -2G(less than 2Gigabyte))
find /path -name fname -atime/mtime/ctime 0(means 1day ago), 1(2days ago)... (to find by timestamp)
find /path -name fname -type f -amin/-mmin/-cmin +10/-5 (by minutes accessed or modified or changed last time.in this example was accessed more than 10minutes ago or was access less than 5 minutes ago)
find /path -name fname -user username (by the owner of the file or directory)
find /path -type f -not -group root (find files , that are NOT in group ROOT)

!!Important Find cmd Feature EXEC
find /path -exec cmd {} \; ({} is the path of each file, \; is the end of exec cmd.)
Examples`
-
find /path -atime -13 -exec cp {} ./anydestination -> (This means that will copy every file from /path which was accessed less than 13 days ago and will copy each file to the anydestination)
OR
find /path -atime -13 -ok cp {} /anypath \; (This means that it will do the same as above, but will prompt for every found file or directory on which will operate)
-
___
dmesg (kernel ring buffer log file which is in RAM)
______________ ______________ ______________ ______________ ______________
--------------------------------------------------------------------------
#Grep (Searching for String Patterns in Text Files)

grep 'pattern text' /file (to find the text from /file if exists)
grep -i (to ignore case)
grep -n (to print out the line number as well)
grep -v (to select non-matching lines)
grep -a (to find text from BINARY FILE and not regular text file)
grep -R /directory(to find the pattern recursively in files of directory)
grep -s (no to show errors about non-existing or unreadable files)
grep -c (count of patterns in file, and when doing in directory via -R it shows count of patterns for each file)
grep -A 2 -B 4 (prints 2lines after match, and 4 lines before match)
grep -C 3 (prints 3lines before and 3lines after the match)
grep -w (search for whole words)
grep -E (extended regular expression)

sort (to sort by name 'alphabetical order')
sort -r (to reverse by alphabetical order)
______________ ______________ ______________ ______________ ______________
--------------------------------------------------------------------------
#Searching for strings in binary files

strings /binaryfile (print ASCII chars from binary file)
______________ ______________ ______________ ______________ ______________
--------------------------------------------------------------------------
#Comparing Files

cmp file1 file2 (comparing by bytes, and lines)
sha256sum file1 file2 (comparing files by cryptographic identification, when even 1bit will be different the results will be different)

diff file1 file2 (comparing and showing the differences in text files)
diff -B (ignore blank lines)
diff -w (ignore white spaces)
diff -i (ignore case)
diff -c (for more detailed comparison, by showing both files'link in github')
diff -y (display both file content in two columns 'side-by-side')
______________ ______________ ______________ ______________ ______________
--------------------------------------------------------------------------
#Compressing and Archiving Files and Directories

tar -cvzf /destpathname.tar.gz /compressingfile1 /compressingfile2optional ... (-c"create", -v"verbose", -z"gzip compressing", -f"lets to name the archive file, only after -f", .tar.gz"commonly used extensions which shows it was created by command tar and compressed by gz)
tar -j ("instead of z, for bzip2 compressing, which compresses faster than gzip")
tar -t (only displays the contents of the archive file)
tar --exclude="pattern" (exclude is for excepting some patterns while creating or displaying archive file. e.g. --exclude="*.tar" --exclude="*.txt")
tar -xzf /archivefile (to extract file content), tar -xf /archivefile -C /destinationdir (to extract in other destination directory)
tar -czvf archivename-$(date +%F) /dirORfilename (to append date too. e.g. archive-2025-02-15)

There are also gzip/gunzip , bzip2/bunzip2 for compressing files, BUT they are only for compressing a SINGLE FILE , but tar is also for directories.
______________ ______________ ______________ ______________ ______________
--------------------------------------------------------------------------
#Hard Links, SymLinks and The Inode Structure

Hard Link - An association between a file structure and a file name.It is displayed while doing ls -l (the second section which is after permissions column is the hard links section which points the count of hard links that are associated with that file structure). And stat /filename (where the Links: section shows count of hard links).
It allows multiple filenames to point to the same data on the disk, meaning that modifying the file through any of its hard links will reflect in all others.
They share the same Inode number as the original file.Only for files and not directories.

ln original_file hard_link_name (To create a Hard Link).
- - - - - -

An inode(index node) is a data structure used by the Linux filesystem to store metadata about a file or directory.Every file in a Linux filesystem is assigned a unique inode number, which acts like an identifier for that file.It stores the important metadata such as: File Type, File size , Owner & Group, Permissions, Number of Hard Links, Timestamps , Location of File Data Blocks "Excluded File Name, File Contents".

find /path -inum 123 (to find files or directories by 123 inum "inode number").

- - - - - -
Symlink/Symbolic Link/Soft Link - A special filetype that points to or contains a reference to another file or directory.

ln -s original_file hard_link_name (To create a Symlink).
______________ ______________ ______________ ______________ ______________
--------------------------------------------------------------------------